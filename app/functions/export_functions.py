from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
from io import BytesIO
import re


class Exporter:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_styles()
        self.doc = SimpleDocTemplate(
            "DoclinkExport.pdf",
            leftMargin=30,
            rightMargin=30,
            topMargin=30,
            bottomMargin=30,
            fontFamily="Helvetica",
            pagesize=A4,
        )

    def setup_styles(self):
        self.styles.add(
            ParagraphStyle(
                name="Header",
                fontSize=14,
                textColor=colors.HexColor("#10B981"),
                spaceAfter=12,
            )
        )

        self.styles.add(
            ParagraphStyle(
                name="Content", fontSize=11, textColor=colors.black, spaceAfter=8
            )
        )

        self.styles.add(
            ParagraphStyle(
                name="Bullet-Point",
                fontSize=11,
                leftIndent=20,
                bulletIndent=10,
                spaceAfter=5,
            )
        )

    def clean_text(self, text: str) -> str:
        text = re.sub(r"\[header\](.*?)\[/header\]", r"<h1>\1</h1>", text)
        text = re.sub(r"\[bold\](.*?)\[/bold\]", r"<b>\1</b>", text)
        return text

    def create_watermark(self, canvas, doc):
        canvas.saveState()
        canvas.setFillColor(colors.HexColor("#10B981"))
        canvas.setFont("Helvetica", 8)
        canvas.drawString(30, 20, "Generated by docklink.io")
        canvas.restoreState()

    def export_pdf(self, data: str) -> BytesIO:
        buffer = BytesIO()
        content = []
        cleaned_text = self.clean_text(data)

        lines = cleaned_text.split("\n")

        for line in lines:
            if line.strip():
                if line.startswith("<h1>") or "header" in line:
                    # Header section
                    text = line.replace("<h1>", "").replace("</h1>", "")
                    content.append(Paragraph(text, self.styles["Header"]))
                elif line.startswith("-"):
                    # Bullet point
                    text = line[1:].strip()
                    content.append(Paragraph(f"â€¢ {text}", self.styles["Bullet-Point"]))
                else:
                    # Normal text
                    content.append(Paragraph(line, self.styles["Content"]))

                content.append(Spacer(1, 2))

        try:
            self.doc.build(
                content,
                onFirstPage=self.create_watermark,
                onLaterPages=self.create_watermark,
            )
            buffer.seek(0)
            return buffer
        except Exception as e:
            raise ValueError(
                f"Error: {e} Content too large or complex to export to PDF"
            )
